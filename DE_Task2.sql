CREATE DATABASE  customer_order_management;

USE customer_order_management;

CREATE TABLE Products (
product_id INT PRIMARY KEY, 
product_name VARCHAR(50), 
price FLOAT NOT NULL 
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    quantity INT,
    order_date DATE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO Products (product_id, product_name, price) VALUES
(1, 'Wireless Mouse', 25.99),
(2, 'Mechanical Keyboard', 79.99),
(3, 'Gaming Headset', 49.99),
(4, 'USB-C Hub', 39.99),
(5, 'External SSD 1TB', 109.99),
(6, '4K Monitor', 299.99),
(7, 'Bluetooth Speaker', 59.99),
(8, 'Web Camera HD', 69.99),
(9, 'Laptop Stand', 34.99),
(10, 'Smartphone Holder', 19.99);
INSERT INTO Products (product_id, product_name, price) VALUES
(11, 'Laptop Cover', 12.99);

INSERT INTO Orders (order_id, customer_id, product_id, quantity, order_date) VALUES
(1, 101, 1, 2, '2023-01-01'),
(2, 102, 3, 1, '2023-01-02'),
(3, 103, 5, 1, '2023-01-03'),
(4, 104, 2, 1, '2023-02-04'),
(5, 105, 6, 1, '2023-03-05'),
(6, 106, 7, 3, '2023-03-06'),
(7, 107, 9, 2, '2023-03-07'),
(8, 101, 8, 1, '2023-04-08'),
(9, 101, 10, 4, '2023-05-09'),
(10, 102, 4, 2, '2023-04-10'),
(11, 101, 1, 1, '2023-05-11'),
(12, 102, 3, 1, '2023-05-12'),
(13, 103, 2, 2, '2023-06-13'),
(14, 104, 7, 1, '2023-06-14'),
(15, 105, 9, 1, '2023-07-15'),
(16, 106, 5, 1, '2023-08-16'),
(17, 107, 6, 1, '2023-08-17'),
(18, 108, 8, 2, '2023-08-18'),
(19, 103, 4, 1, '2023-09-19'),
(20, 103, 10, 2, '2023-09-20'),
(21, 101, 3, 1, '2023-10-21'),
(22, 102, 2, 3, '2023-10-22'),
(23, 103, 1, 4, '2023-10-23'),
(24, 104, 5, 2, '2023-11-24'),
(25, 105, 6, 1, '2023-12-25'),
(26, 106, 9, 1, '2023-12-26'),
(27, 107, 7, 1, '2024-01-27'),
(28, 108, 10, 3, '2024-08-28'),
(29, 101, 8, 1, '2024-08-29'),
(30, 102, 4, 1, '2024-08-30');

-- 1. Basic Queries:

-- Write a query to retrieve the total quantity of each product ordered.
SELECT product_id, sum(quantity) 
FROM Orders
GROUP BY product_id;

-- Write a query to list all orders placed in the last 7 days.
SELECT *
FROM Orders
WHERE  order_date >= CURDATE() - INTERVAL 7 DAY;

-- Write a query to find the total sales amount for each order by multiplying the quantity by the product price
SELECT o.order_id, (o.quantity * p.price) AS total_sales_amount
FROM Orders o
INNER JOIN Products p 
ON o.product_id = p.product_id;


-- 2. Intermediate Queries:

--  Write a query to find the top 3 best-selling products by total quantity
SELECT product_id, sum(quantity) 
FROM Orders
GROUP BY product_id
ORDER BY sum(quantity) DESC
LIMIT 3;

-- Write a query to find the total revenue generated by each product.
SELECT 
    o.product_id,
    SUM(o.quantity * p.price) AS total_revenue_generated
FROM Orders o
INNER JOIN Products p 
ON o.product_id = p.product_id
GROUP BY o.product_id ;

-- Write a query to list the products that have never been ordered.
SELECT p.product_id, p.product_name
FROM Products p
LEFT JOIN Orders o 
ON p.product_id = o.product_id
WHERE o.order_id IS NULL;


-- 3. Date & Time Queries:

-- Write a query to count how many orders were placed in each month of 2023.
SELECT MONTH(order_date),COUNT(order_id)
FROM Orders 
WHERE YEAR(order_date) = '2023'
GROUP BY MONTH(order_date);

-- Write a query to find all orders placed on weekends (Saturday and Sunday).
SELECT *
FROM Orders 
WHERE DAYOFYEAR(order_id) IN ('Saturday', 'Sunday');


-- 4. Customer-focused Queries:

-- Write a query to find customers who have placed more than 5 orders.
SELECT customer_id , COUNT(order_id)
FROM Orders
GROUP BY customer_id
HAVING COUNT(order_id) >= 5 ;

-- Write a query to find the customers who placed an order within the first 30 days of the year.
SELECT customer_id
FROM Orders
WHERE  DAYOFYEAR(order_date) <= 30;